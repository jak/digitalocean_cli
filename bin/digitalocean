#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'digitalocean_cli'
require 'awesome_print'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/digitalocean_cli` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/digitalocean_cli now"
  exit 64
end

include GLI::App

program_desc 'DigitalOcean Command Line Interface'

version DigitaloceanCli::VERSION

config_file '.digitalocean.rc'

desc 'Your DigitalOcean API Key'
arg_name 'API_KEY'
flag [:K,:apikey]

desc 'Your DigitalOcean Client ID'
arg_name 'CLIENT_ID'
flag [:C,:clientid]

desc 'List Droplets'
long_desc 'a longer desc'
command :droplets do |c| # <- c is an instance of GLI::Command
  c.action do |global,options,args|
    @client.droplets().each do |droplet|
      ap droplet
    end
  end

  c.command :destroy do |c|
    c.arg_name 'Droplet ID'
    c.action do |global,options,args|
      help_now! "Missing droplet id" if args.length == 0
    end
  end
end


desc 'All Images'
long_desc 'This method returns all the available images that can be accessed by your client ID. You will have access to all public images by default, and any snapshots or backups that you have created in your own account.'
command :images do |c|
  c.action do |global, options, args|
    puts "%-10s %-50s %-10s" % ["Image ID", "Name", "Distro"]
    @client.images.each  do |image|
      puts "%-10s %-50s %-10s" % [image.id, image.name, image.distribution]
    end
  end

  c.desc 'This method displays the attributes of an image.'
  c.arg_name 'IMAGE_ID'
  c.command :show do |show|
    show.action do |global, options, args|
      help_now!('No image ID specified') if args.empty?
      ap @client.images.find(args.first.to_i)
    end
  end
end

desc 'SSH Keys'
long_desc 'This method lists all the available public SSH keys in your account that can be added to a droplet.'
command :sshkeys do |c|
  c.action do |global, options, args|
    puts "%-12s %-50s" % ["SSH Key ID", "Name"]
    @client.ssh_keys.each do |ssh_key|
      puts "%-12s %-50s" % [ssh_key.id, ssh_key.name]
    end
  end

  c.desc 'Show SSH Key'
  c.long_desc 'This method shows a specific public SSH key in your account that can be added to a droplet.'
  c.arg_name 'SSH_KEY_ID'
  c.command :show do |show|
    show.action do |global, options, args|
      help_now!('No SSH key ID specified') if args.empty?
      ap @client.ssh_keys.find(args.first.to_i)
    end
  end
end



pre do |global,command,options,args|
  if global[:apikey] == nil or global[:clientid] == nil then
    help_now!('apikey and clientid is required')
    return false
  end
  @client = Colombo.new(
    :api_key   => global[:apikey],
    :client_id => global[:clientid]
  )
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
